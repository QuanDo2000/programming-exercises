"""
ID: 2
Name: Even Fibonacci numbers
Description:
    Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
Link: https://projecteuler.net/problem=2
Help:
- https://mathematica.stackexchange.com/questions/37266/even-fibonacci-numbers/37275#37275
- https://en.wikipedia.org/wiki/Fibonacci_number#Primes_and_divisibility
"""


import time
import math


def index_fibonacci(upper_bound):
    """Return the index of the number in the Fibonacci sequence closest to the upper bound."""
    # phi = Golden Ratio
    phi = (1 + math.sqrt(5)) / 2
    # Formula for index taken from Wikipedia
    return math.floor(math.log(upper_bound * math.sqrt(5) + (1 / 2), phi))


def sum_even_fibonacci(upper_bound):
    """Return the sum of all the even numbers in the Fibonacci sequence."""
    # phi = GoldenRatio ^ 3
    # psi = (-GoldenRatio) ^ (-3)
    golden_ratio = (1 + math.sqrt(5)) / 2
    phi = golden_ratio ** 3
    psi = (-golden_ratio) ** (-3)
    k = index_fibonacci(upper_bound) // 3
    # Calculate the sum from two geometric series
    total = ((1 / math.sqrt(5)) * (phi * ((1 - (phi ** k)) / (1 - phi))
                                   - psi * ((1 - (psi ** k)) / (1 - psi))))
    return total


if __name__ == "__main__":
    upper_bound = int(input("Enter upper bound: "))

    start = time.time_ns()

    print("\nUpper Bound: {}".format(upper_bound))
    index = index_fibonacci(upper_bound)
    print("The index is: {} which means k = {}".format(index, index // 3))
    res = int(sum_even_fibonacci(upper_bound))
    print("The sum is: {}".format(res))

    time_diff = (time.time_ns() - start) / 1000000
    if time_diff < 1e3:
        print('Time taken: {:.4} ms'.format(time_diff))
    else:
        print('Time taken: {:.4} s'.format(time_diff / 1000))
