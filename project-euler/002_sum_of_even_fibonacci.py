# ID: 002
# Name: Even Fibonacci numbers
# Description: Each new term in the Fibonacci sequence is generated by adding
#              the previous two terms. By starting with 1 and 2, the first 10
#              terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#              By considering the terms in the Fibonacci sequence whose values
#              do not exceed four million, find the sum of the even-valued terms.
# Link: https://projecteuler.net/problem=2
# Help:
#   https://mathematica.stackexchange.com/questions/37266/even-fibonacci-numbers/37275#37275
#   https://en.wikipedia.org/wiki/Fibonacci_number#Primes_and_divisibility

import sys   # Import exit()
import math  # Import log(), sqrt(), floor()


# Function index_fibonacci:
#   Find the index of the number in the Fibonacci sequence closest to the upper_bound.
def index_fibonacci(upper_bound):
    # phi = Golden Ratio
    phi = (1 + math.sqrt(5)) / 2
    # Formula for index taken from Wikipedia
    return math.floor(math.log(upper_bound * math.sqrt(5) + (1/2), phi))


# Function sum_even_fibonacci:
#   Find the sum of all the even numbers in the Fibonacci sequence
def sum_even_fibonacci(upper_bound):
    # phi = GoldenRatio ^ 3
    # psi = (-GoldenRatio) ^ (-3)
    golden_ratio = (1 + math.sqrt(5)) / 2
    phi = golden_ratio ** 3
    psi = (-golden_ratio) ** (-3)
    k = index_fibonacci(upper_bound) // 3
    # Calculate the sum from two geometric series
    total = ((1/math.sqrt(5)) * (phi * ((1 - (phi ** k)) / (1 - phi))
                                 - psi * ((1 - (psi ** k)) / (1 - psi))))
    return total


# Check for input error
try:
    upper_bound = int(input("Enter upper bound: "))
except ValueError:
    # Handle invalid input
    print("Invalid Input.\nExit...")
    sys.exit()

# Print the result
print("\nUpper Bound: {0:,}".format(upper_bound))
index = index_fibonacci(upper_bound)
print("The index is: {0} which means k = {1}".format(index, index // 3))
print("The sum is: {0:,.0f}".format(sum_even_fibonacci(4000000)))
