"""
ID: 12
Name: Highly divisible triangular number
Description:
    The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
    1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    Let us list the factors of the first seven triangle numbers:
    1: 1
    3: 1,3
    6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28
    We can see that 28 is the first triangle number to have over five divisors. What is the value of the first triangle number to have over five hundred divisors?
Link: https://projecteuler.net/problem=12
Help:
- https://stackoverflow.com/questions/6800193/what-is-the-most-efficient-way-of-finding-all-the-factors-of-a-number-in-python
- 012_overview.pdf from https://projecteuler.net/problem=12
- https://lucidmanager.org/euler-problem-12-triangular-number/
- https://codereview.stackexchange.com/questions/105356/project-euler-12-highly-divisible-triangular-number
"""


import time
# from functools import reduce


def triangular_num(n):
    """Return the triangular num at index n."""
    return int((n * (n + 1)) / 2)


def nth_prime_list(n):
    """Return the nth prime number."""
    # Create prime number list up to nth number
    prime_list = [2]
    num = 3
    while len(prime_list) < n:
        # If num a multiple of a smaller prime then break
        for p in prime_list:
            if num % p == 0:
                break
        else:
            prime_list.append(num)
        # Increment num in steps of 2
        num += 2
    # Return prime list
    return prime_list


# Old Method!!!
# Function factors():
#   Find all factors of a number
# def factors(n):
#     return set(reduce(list.__add__, ([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))


def find_divisors(num):
    """Return the amount of divisors of a number."""
    global primes
    count = 1
    for factor in primes:
        if factor ** 2 > num:
            count *= 2
            break
        exponent = 1
        while num % factor == 0:
            exponent += 1
            num /= factor
        if exponent > 1:
            count = count * exponent
        if num == 1:
            break
    return count


if __name__ == "__main__":
    num = int(input("Enter amount of divisors: "))

    start = time.time_ns()

    primes = nth_prime_list(1000)
    i = 1
    triangularVal = triangular_num(i)
    while find_divisors(triangularVal) < num:
        i += 1
        triangularVal = triangular_num(i)
    print("The first triangular number with {} divisors is {}".format(
        num, triangularVal))

    time_diff = (time.time_ns() - start) / 1000000
    if time_diff < 1e3:
        print('Time taken: {:.4} ms'.format(time_diff))
    else:
        print('Time taken: {:.4} s'.format(time_diff / 1000))
